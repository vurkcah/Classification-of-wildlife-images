import streamlit as st
import os
import shutil
import tempfile
from pathlib import Path
import atexit
import patoolib
from ultralytics import YOLO
import threading
import time
#---------------------------------------------------------------------------------------------#
st.set_page_config(
    page_title="–ù–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∂–∏–≤–æ–π –ø—Ä–∏—Ä–æ–¥—ã",
    page_icon="üå≤",
    layout="wide",
    initial_sidebar_state="collapsed", 
)
#---------------------------------------------------------------------------------------------#
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–ø–∫–∏ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º
def upload_folder():
    uploaded_archive = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–∞–ø–∫—É —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZIP –∏–ª–∏ RAR", type=["zip", "rar"])
    if uploaded_archive:
        folder_path = os.path.join(os.getcwd(), "uploaded_dataset")
        
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
        if os.path.exists(folder_path):
            shutil.rmtree(folder_path)
        os.makedirs(folder_path, exist_ok=True)
        
        with tempfile.TemporaryDirectory() as tmpdirname:
            archive_path = os.path.join(tmpdirname, uploaded_archive.name)
            with open(archive_path, "wb") as f:
                f.write(uploaded_archive.getbuffer())
            
            if uploaded_archive.name.endswith(".zip"):
                shutil.unpack_archive(archive_path, folder_path)
            elif uploaded_archive.name.endswith(".rar"):
                patoolib.extract_archive(archive_path, outdir=folder_path)
            
        st.success(f"–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {folder_path}")
        return folder_path.replace('\\', '/')

    return None
#---------------------------------------------------------------------------------------------#
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏    
def uploaded_model():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ 'valid_model', –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    model_path = os.path.join(os.getcwd(), "uploaded_model")
    if not os.path.exists(model_path):
        os.makedirs(model_path, exist_ok=True)
    uploaded_model = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ YOLO –º–æ–¥–µ–ª—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PT", type=["pt"], key="yolo_model_uploader")
    
    
    if uploaded_model:
        # –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        if os.path.exists(model_path):
            shutil.rmtree(model_path)
        os.makedirs(model_path, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ .pt
        file_path = os.path.join(model_path, 'model.pt')
        with open(file_path, "wb") as f:
            f.write(uploaded_model.getbuffer())
        
        st.success(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {model_path}")
        return model_path.replace('\\', '/')

    return None
#---------------------------------------------------------------------------------------------#
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
def download_trained_model(train_name):
    model_path = f'./runs/classify/{train_name}/'
    archive_path = f'./{train_name}_model.zip'
    if os.path.exists(model_path):
        shutil.make_archive(f'./{train_name}_model', 'zip', model_path)
        with open(archive_path, 'rb') as f:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å",
                data=f,
                file_name=f'./{train_name}_model.zip',
                mime='application/zip'
            )
    else:
        st.error("–û—à–∏–±–∫–∞: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ.")
#---------------------------------------------------------------------------------------------#
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ uploaded_dataset –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def cleanup_folder(folder_path):
    try:
        if os.path.exists(folder_path):
            shutil.rmtree(folder_path)
    except PermissionError:
        print("–û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏. –ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.")
#---------------------------------------------------------------------------------------------#
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
def train_yolo(dataset_folder_path, progress_indicator, chose_model, chose_epochs, train_name, chose_device):
    model = YOLO(f"yolo11{chose_model}-cls.pt")
    try:
        # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
        progress_indicator.subheader("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞–ª–æ—Å—å...üßëüèø‚Äçüíª")
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
            model.train(data=f'{dataset_folder_path}/dataset', epochs=chose_epochs, name=train_name, device=chose_device)
        progress_indicator.subheader("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.ü¶æ")
        st.toast('–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', icon='üéâüéâüéâ')
        download_trained_model(train_name)
    except Exception as e:
        progress_indicator.subheader("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.")
#---------------------------------------------------------------------------------------------#
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏
def valid_yolo(model_path, progress_indicator, dataset_folder_path, name_valid, chose_device):
    model = YOLO(model_path, task='classify')
    try:
        # –õ–æ–≥–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è
        progress_indicator.subheader("–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å...üßëüèø‚Äçüíª")
        with st.spinner("–í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
            model.val(data=f'{dataset_folder_path}/dataset', name=name_valid, device=chose_device)
        progress_indicator.subheader("–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.üìà")
        st.toast('–í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', icon='üéâüéâüéâ')
    except Exception as e:
        progress_indicator.subheader(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
#---------------------------------------------------------------------------------------------#
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def classify_images(model_path, image_paths, col1, col2, class_names):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    if not Path(model_path).exists():
        st.error(f"–û—à–∏–±–∫–∞: –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ '{model_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    for image_path in image_paths:
        if not Path(image_path).exists():
            st.error(f"–û—à–∏–±–∫–∞: –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é '{image_path}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    model = YOLO(model_path, task='classify')
    try:
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for image_path in image_paths:
            results = model(image_path)
            col1, col2 = st.columns([1, 4])
            with col1:
                st.image(image_path)
            with col2:
                st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
                for result in results:
                    if result.probs is not None:
                        top5_indices = result.probs.top5
                        top5_confidences = result.probs.top5conf
                        for i in range(5):
                            class_name = class_names[top5_indices[i]] if top5_indices[i] < len(class_names) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å"
                            st.write(f"–ö–ª–∞—Å—Å: {class_name}, –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {top5_confidences[i]:.2f}")
        st.toast('–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', icon='üéâüéâüéâ')   
    except Exception as e:
        st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {str(e)}")

#---------------------------------------------------------------------------------------------#
#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def upload_images():
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ "uploaded_image"
    upload_folder = 'uploaded_image'
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ "uploaded_image", –µ—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞—ë–º –µ—ë
    if not os.path.exists(upload_folder):
        os.makedirs(upload_folder)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", type=["jpg", "jpeg", "png"], accept_multiple_files=True)
    image_paths = []
    if uploaded_files:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ "uploaded_image"
        for file_name in os.listdir(upload_folder):
            file_path = os.path.join(upload_folder, file_name)
            if os.path.isfile(file_path):
                os.remove(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–ø–∫—É "uploaded_image"
        for uploaded_file in uploaded_files:
            image_path = os.path.join(upload_folder, uploaded_file.name)
            with open(image_path, 'wb') as f:
                f.write(uploaded_file.getbuffer())
            image_paths.append(image_path)
        st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
        
    return image_paths
#---------------------------------------------------------------------------------------------#
st.header('***–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é***')
select_action = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–ª—è –≤–∞—Å —Ñ—É–Ω–∫—Ü–∏—é",("-- –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é --","–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞", "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"), label_visibility="hidden", index=0)
#---------------------------------------------------------------------------------------------#
if select_action == "–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞":
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    chose_model = st.select_slider(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏",
        options=[
            "n",
            "s",
            "m",
            "l",
            "x",
        ],
        value="n"
    )
    chose_epochs = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö", 0, 1000, 2)
    chose_device_train = st.select_slider("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–±—É—á–µ–Ω–∏—è", options=["cuda", "cpu"], value="cpu")
    if chose_device_train == "cuda":
        chose_device_train=0
    #st.write(f"–í–∞–ª–∏–¥–∞—Ü–∏—è {chose_val}")
    train_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "class_nature")
    #st.write("The current movie title is", train_name)
    st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –≤–∞—à–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º")
    dataset_folder_path_train = upload_folder()
    if dataset_folder_path_train:
        atexit.register(cleanup_folder, dataset_folder_path_train)
    start_train = st.button("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", icon="üöÄ")
    if start_train:
        if os.path.exists(f"./runs/classify/{train_name}") and os.path.isdir(f"./runs/classify/{train_name}"):
            shutil.rmtree(f"./runs/classify/{train_name}")
        progress_indicator = st.empty()
        # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∑–∞–≥—Ä—É–∑–∫–∏
        train_yolo(dataset_folder_path_train, progress_indicator, chose_model, chose_epochs, train_name, chose_device_train)
    st.session_state['train_model_path'] = f"./runs/classify/{train_name}/weights/best.pt"
#---------------------------------------------------------------------------------------------#        
if select_action == "–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞":
    train_model_path = st.session_state.get('train_model_path', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∏—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    chose_device_valid = st.select_slider("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–∞–ª–∏–¥–∞—Ü–∏–∏", options=["cuda", "cpu"], value="cpu")
    if chose_device_valid == "cuda":
        chose_device_valid=0
    valid_name = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", "valid_nature")
    st.subheader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—Ä—Ö–∏–≤ —Å –≤–∞—à–∏–º –¥–∞—Ç–∞—Å–µ—Ç–æ–º")
    dataset_folder_path_valid = upload_folder()
    if dataset_folder_path_valid:
        atexit.register(cleanup_folder, dataset_folder_path_valid)
    chose_model_valid = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏", ["–¢–µ–∫—É—â–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å"])
    if chose_model_valid == "–¢–µ–∫—É—â–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å":
        if train_model_path == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ":
           warning = st.warning('–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å!', icon="‚ö†Ô∏è")
        else:    
            valid_model = train_model_path
    if chose_model_valid == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å":
        uploaded_model = uploaded_model()
        valid_model = f"{uploaded_model}/model.pt"
    valid_start = st.button("–ù–∞—á–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é", icon="üöÄ")
    if valid_start:
        if os.path.exists(f"./runs/classify/{valid_name}") and os.path.isdir(f"./runs/classify/{valid_name}"):
            shutil.rmtree(f"./runs/classify/{valid_name}")
        progress_indicator = st.empty()
        valid_yolo(valid_model, progress_indicator, dataset_folder_path_valid, valid_name, chose_device_valid)
        matrix_path = f"./runs/classify/{valid_name}/confusion_matrix.png"
        matrix_normalized_path = f"./runs/classify/{valid_name}/confusion_matrix_normalized.png"
        if Path(matrix_path).exists():
            st.header("***–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏***")
            placeholder1 = st.empty()
            placeholder2 = st.empty()
            placeholder1, placeholder2 = st.columns(2)
            with placeholder1:
                st.image(matrix_path)
            with placeholder2:
                st.image(matrix_normalized_path)
#---------------------------------------------------------------------------------------------#              
if select_action == "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π":
    train_model_path = st.session_state.get('train_model_path', '–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
    class_names = [
    "–¶–∏–∫–æ—Ä–∏–π –û–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π ",
    "–î–Ω–µ–≤–Ω–æ–π –ü–∞–≤–ª–∏–Ω–∏–π –ì–ª–∞–∑",
    "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–π –ö—Ä–æ—Ç",
    "–ñ—É–∫-–û–ª–µ–Ω—å",
    "–õ–µ–±–µ–¥—å –®–∏–ø—É–Ω",
    "–¢—ã—Å—è—á–µ–ª–∏—Å—Ç–Ω–∏–∫"
    ]
    chose_model_class = st.radio("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏", ["–¢–µ–∫—É—â–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å"])
    if chose_model_class == "–¢–µ–∫—É—â–∞—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å":
        if train_model_path == "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ":
           warning = st.warning('–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å!', icon="‚ö†Ô∏è")
        else:    
            class_model = train_model_path
    if chose_model_class == "–ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å":
        uploaded_model = uploaded_model()
        class_model = f"{uploaded_model}/model.pt"
    images = upload_images()
    class_button = st.button("–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å", icon="üöÄ")
    if class_button:
        placeholder1 = st.empty()
        placeholder2 = st.empty()
        classify_images(class_model, images, placeholder1, placeholder2, class_names)

